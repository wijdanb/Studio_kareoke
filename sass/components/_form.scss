.form{
    &__group:not(:last-child){
        margin-bottom: 2rem;


    }

    
    &__input{
        font-size: 1.5rem;
        font-family: inherit; //by default browsers dont give input elements the font family that I have set for the webpage. I can set it to inherit 
        color:inherit; //input elements DONT INHERTI THE FONT PROPERTIES
        padding: 1.5rem 2rem; //always make it a bit bigger on the sidees
        border-radius: 2px;
        background-color: rgba($color-white,0.9);
        border: none;
        border-bottom: 3px solid transparent; //without this, the input underneath the first will be pushed down due to the border-bottom. 
        width: 90%;
        display: block;


        @include respond(tab-port){
            width:100%;
           
        }

        &:focus{
            outline: none; //I dont want the blue border(which is default) for when I click the input. 
            //BUT focus is for accesibility reasons! So I should ALWAYS make the form elements that are focused visible! Ill do that by giving it a box shadow and border at the bottom
            box-shadow: 0 1rem 2rem rgba($color-black, .1);
            border-bottom: 3px solid $color-primary;
           
    
        }

        &:focus:invalid{
            border-bottom: 3px solid $color-card-secondary-light;

        }
    
        //When I start typing, the color goes from default placeholder color to black. I want it to be that default grey color so
        //I do -webkit-input-placeholder BUT ONLY works on safari and chome. Remember that pseudo elements represent things that are actually ON the webpage and so a placeholder is a pseudo element.  Pseudo class are states like 
        &::-webkit-input-placeholder{
            color: $color-grey-dark-2;
    
        }


    
    
        
    }


    &__label{
        font-size: 1.2rem;
        font-weight: 700;
        margin-left: 2rem;
        margin-top: .7rem;
        display:block;
        transition: all .3s;


    }

    
    //adjacent sibling is what comes immediately after the element I  select in the first place. So I selected input and then with the adjacent sibling selector, I select the first sibling, which is the label.  In this case it works. Even if there was an element between in here, e.g another div inside and a button,
    // then I would still use a sibling selector BUT I WOULD HAVE TO USE ~ .  
    //One particular thing about the sibling selector is that whatever I select(in this case the label)  always HAS to be after the first element(input in this case). label needs to be after the input which is the case here IN ORDER TO BE SELECTED WITH THE SIBLING SELECTOR. If I ad label before input, THERE WOULD BE NO WAY OF SELECTING THE LABEL FROM THE INPUT, WOULDNT WORK!
    &__input:placeholder-shown + &__label{
        opacity: 0;
        visibility: hidden;
        transform: translateY(-4rem);


    }

    &__radio-group{
        width: 50%;
        display: inline-block;

    }

    &__radio-label{
        font-size: $default-font-size;

    }


    &__radio-group{
        width: 49%;
        display: inline-block;

        @include respond(tab-port){
            width:100%;
            margin-bottom: 2rem;
        }

    }

    &__radio-input{
        display:none; //to get rid of the default radio circles

    }
    

    &__radio-label{
        font-size: $default-font-size;
        cursor: pointer; //brings the hand
        position:relative;
        padding-left: 4.5rem;


    }
    

    &__radio-button{
        height: 3rem;
        width: 3rem;
        border: 5px solid $color-primary;
        border-radius: 50%;
        display:inline-block;
        position: absolute;
        left: 1rem;
        top: -.5rem;


        &::after{
            content: "";
            display: block;
            height: 1rem;
            width: 1rem;
            position:absolute;
            border-radius: 50%;
            top:50%;
            left:50%;
            transform: translate(-50%,-50%);
            background-color: $color-primary;
            opacity:0;
           
            transition : opacity .2s;
        }

    }

    //as soon as I hit the label element, the radio input(circle) becomes checked.
    //the :checked pseudoclass  lets me select all the radio elements that are check.
    //then I select the sibling (__radio-label) then the child(radio-button) because thats the one I want to change each time that the radio input is selected.  
    &__radio-input:checked ~ &__radio-label &__radio-button::after{
        opacity:1;
       

    }
  
}


 